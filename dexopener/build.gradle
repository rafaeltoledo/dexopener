import com.android.ddmlib.DdmPreferences
import proguard.gradle.ProGuardTask

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.1'
    }
}

apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'

apply from: "$rootDir/gradle/android.gradle"

android {
    defaultConfig {
        minSdkVersion 16
        testApplicationId 'test.com.github.tmurakami.dexopener'
        testInstrumentationRunner '.MyAndroidJUnitRunner'
        consumerProguardFile 'proguard-rules.pro'
    }
    lintOptions.disable 'InvalidPackage'
    testOptions.animationsDisabled true
    DdmPreferences.setTimeOut 60000
    libraryVariants.all { it.generateBuildConfigProvider.get().enabled = false }
}

configurations {
    jarjar
    repackage
}

def repackagedJar = "$buildDir/libs/repackaged.jar"

dependencies {
    jarjar deps.jarjar
    repackage deps.dexlib2
    compileOnly deps.androidx.annotation
    implementation files(project(':classloaderhelper').jar)
    implementation files(repackagedJar) { builtBy 'repackageDependencies' }
    testImplementation deps.junit
    testImplementation deps.mockito.core
    testImplementation deps.dexlib2
    androidTestImplementation deps.androidx.test.runner
    androidTestImplementation deps.androidx.test.ext.junit
}

task repackageDependencies(type: ProGuardTask) {
    outputs.file repackagedJar
    injars filter: '!AndroidManifest.xml,!META-INF/**', configurations.repackage
    outjars "$buildDir/tmp/repackage.tmp.jar"
    libraryjars project.android.bootClasspath
    configuration 'proguard-rules-repackage.pro'
    doLast {
        def rootPackage = "${project.group}.${project.name}.repackaged"
        ant {
            taskdef name: 'jarjar',
                    classname: 'org.pantsbuild.jarjar.JarJarTask',
                    classpath: configurations.jarjar.asPath
            jarjar(jarfile: repackagedJar) {
                outJarFiles.each { zipfileset src: it }
                rule pattern: 'com.google.common.**', result: "$rootPackage.@0"
                rule pattern: 'org.jf.**', result: "$rootPackage.@0"
            }
        }
        files(outJarFiles)*.delete()
    }
}

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.sourceFiles
    from android.sourceSets.main.resources.sourceFiles
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

install {
    repositories.mavenInstaller {
        pom.project {
            url 'https://github.com/tmurakami/dexopener'
            inceptionYear '2016'
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
            developers {
                developer {
                    id 'tmurakami'
                    name 'Tsuyoshi Murakami'
                }
            }
            scm {
                url 'https://github.com/tmurakami/dexopener'
                connection 'scm:git:git://github.com/tmurakami/dexopener.git'
            }
        }
    }
}
